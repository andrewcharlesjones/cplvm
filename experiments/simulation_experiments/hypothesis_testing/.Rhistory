verbose = FALSE)
sim.groups <- logNormCounts(sim.groups)
sim.groups <- runPCA(sim.groups, ncomponents=2)
plotPCA(sim.groups, colour_by = "Group")
## ----groups-------------------------------------------------------------------
# sim.groups <- splatSimulate(batchCells = c(100, 100),
#                             nGenes = 500,
#                             group.prob = c(0.5, 0.5),
#                             method = "groups",
#                             verbose = FALSE)
sim.groups <- splatSimulate(group.prob = c(0.75, 0.25),
method = "groups",
verbose = FALSE)
sim.groups <- logNormCounts(sim.groups)
sim.groups <- runPCA(sim.groups, ncomponents=2)
plotPCA(sim.groups, colour_by = "Group")
?splatSimulate
## ----groups-------------------------------------------------------------------
sim.groups <- splatSimulate(nBatches = 2,
batchCells = c(100, 100),
nGenes = 500,
group.prob = c(0.5, 0.5),
method = "groups",
verbose = FALSE)
## ----groups-------------------------------------------------------------------
sim.groups <- splatSimulate(batchCells = c(100),
nGenes = 500,
group.prob = c(0.5, 0.5),
method = "groups",
verbose = FALSE)
sim.groups <- logNormCounts(sim.groups)
sim.groups <- runPCA(sim.groups, ncomponents=2)
source('~/Documents/beehive/cplvm/data/splatter/generate_splatter_data.R', echo=TRUE)
sim.groups <- splatSimulate(batchCells = c(100),
nGenes = 500,
group.prob = c(0.5, 0.5),
method = "groups",
verbose = FALSE)
# sim.groups <- splatSimulate(group.prob = c(0.75, 0.25),
#                             method = "groups",
#                             verbose = FALSE)
# count_matrix <- sim.groups@assays@data$counts %>% t() %>% as.data.frame()
# count_matrix %>% ggplot(aes(Gene1, Gene2)) +
#   geom_point()
# prcomp(count_matrix)
sim.groups <- logNormCounts(sim.groups)
sim.groups <- runPCA(sim.groups, ncomponents=2)
plotPCA(sim.groups, colour_by = "Group")
sim.groups <- splatSimulate(batchCells = c(100),
nGenes = 500,
group.prob = c(0.5, 0.5),
method = "groups",
verbose = FALSE)
# sim.groups <- splatSimulate(group.prob = c(0.75, 0.25),
#                             method = "groups",
#                             verbose = FALSE)
# count_matrix <- sim.groups@assays@data$counts %>% t() %>% as.data.frame()
# count_matrix %>% ggplot(aes(Gene1, Gene2)) +
#   geom_point()
# prcomp(count_matrix)
sim.groups <- logNormCounts(sim.groups)
sim.groups <- runPCA(sim.groups, ncomponents=2)
plotPCA(sim.groups, colour_by = "Group")
## ----groups-------------------------------------------------------------------
sim.groups <- splatSimulate(batchCells = c(200, 100),
nGenes = 500,
group.prob = c(0.5, 0.5),
method = "groups",
verbose = FALSE)
sim.groups <- logNormCounts(sim.groups)
sim.groups <- runPCA(sim.groups, ncomponents=2)
plotPCA(sim.groups, colour_by = "Group")
## ----groups-------------------------------------------------------------------
sim.groups <- splatSimulate(batchCells = c(200, 100),
nGenes = c(500, 500)
,
group.prob = c(0.5, 0.5),
method = "groups",
verbose = FALSE)
## ----groups-------------------------------------------------------------------
sim.groups <- splatSimulate(batchCells = c(200, 100),
nGenes = 500,
group.prob = c(0.5),
method = "groups",
verbose = FALSE)
## ----groups-------------------------------------------------------------------
sim.groups <- splatSimulate(batchCells = c(200, 100),
nGenes = 500,
group.prob = c(1),
method = "groups",
verbose = FALSE)
sim.groups <- logNormCounts(sim.groups)
sim.groups <- runPCA(sim.groups, ncomponents=2)
plotPCA(sim.groups, colour_by = "Group")
## ----groups-------------------------------------------------------------------
sim.groups <- splatSimulate(batchCells = c(200,100),
nGenes = 500,
group.prob = c(0.5, 0.5),
method = "groups",
verbose = T)
## ----groups-------------------------------------------------------------------
sim.groups <- splatSimulate(batchCells = c(200,10),
nGenes = 500,
group.prob = c(0.5, 0.5),
method = "groups",
verbose = T)
# sim.groups <- splatSimulate(group.prob = c(0.75, 0.25),
#                             method = "groups",
#                             verbose = FALSE)
# count_matrix <- sim.groups@assays@data$counts %>% t() %>% as.data.frame()
# count_matrix %>% ggplot(aes(Gene1, Gene2)) +
#   geom_point()
# prcomp(count_matrix)
sim.groups <- logNormCounts(sim.groups)
sim.groups <- runPCA(sim.groups, ncomponents=2)
plotPCA(sim.groups, colour_by = "Group")
## ----groups-------------------------------------------------------------------
sim.groups <- splatSimulate(nCells = 200,
nGenes = 500,
group.prob = c(0.5, 0.5),
method = "groups",
verbose = F)
## ----groups-------------------------------------------------------------------
sim.groups <- splatSimulate(batchCells = 200,
nGenes = 500,
group.prob = c(0.5, 0.5),
method = "groups",
verbose = F)
sim.groups <- logNormCounts(sim.groups)
sim.groups <- runPCA(sim.groups, ncomponents=2)
plotPCA(sim.groups, colour_by = "Group")
# Estimate parameters from mock data
params <- splatEstimate(sce)
sim.groups <- splatSimulate(batchCells = 200,
nGenes = 500,
group.prob = c(0.75, 0.5),
method = "groups",
verbose = F)
# sim.groups <- splatSimulate(group.prob = c(0.75, 0.25),
#                             method = "groups",
#                             verbose = FALSE)
# count_matrix <- sim.groups@assays@data$counts %>% t() %>% as.data.frame()
# count_matrix %>% ggplot(aes(Gene1, Gene2)) +
#   geom_point()
# prcomp(count_matrix)
sim.groups <- logNormCounts(sim.groups)
sim.groups <- runPCA(sim.groups, ncomponents=2)
plotPCA(sim.groups, colour_by = "Group")
## ----groups-------------------------------------------------------------------
sim.groups <- splatSimulate(batchCells = 200,
nGenes = 500,
group.prob = c(0.75, 0.25),
method = "groups",
verbose = F)
# sim.groups <- splatSimulate(group.prob = c(0.75, 0.25),
#                             method = "groups",
#                             verbose = FALSE)
# count_matrix <- sim.groups@assays@data$counts %>% t() %>% as.data.frame()
# count_matrix %>% ggplot(aes(Gene1, Gene2)) +
#   geom_point()
# prcomp(count_matrix)
sim.groups <- logNormCounts(sim.groups)
sim.groups <- runPCA(sim.groups, ncomponents=2)
plotPCA(sim.groups, colour_by = "Group")
## ----groups-------------------------------------------------------------------
sim.groups <- splatSimulate(batchCells = 200,
nGenes = 500,
group.prob = c(0.95, 0.05),
method = "groups",
verbose = F)
# sim.groups <- splatSimulate(group.prob = c(0.75, 0.25),
#                             method = "groups",
#                             verbose = FALSE)
# count_matrix <- sim.groups@assays@data$counts %>% t() %>% as.data.frame()
# count_matrix %>% ggplot(aes(Gene1, Gene2)) +
#   geom_point()
# prcomp(count_matrix)
sim.groups <- logNormCounts(sim.groups)
sim.groups <- runPCA(sim.groups, ncomponents=2)
plotPCA(sim.groups, colour_by = "Group")
## ----groups-------------------------------------------------------------------
sim.groups <- splatSimulate(batchCells = 200,
nGenes = 500,
group.prob = c(0.75, 0.25),
method = "groups",
verbose = F)
# sim.groups <- splatSimulate(group.prob = c(0.75, 0.25),
#                             method = "groups",
#                             verbose = FALSE)
# count_matrix <- sim.groups@assays@data$counts %>% t() %>% as.data.frame()
# count_matrix %>% ggplot(aes(Gene1, Gene2)) +
#   geom_point()
# prcomp(count_matrix)
sim.groups <- logNormCounts(sim.groups)
sim.groups <- runPCA(sim.groups, ncomponents=2)
plotPCA(sim.groups, colour_by = "Group")
count_matrix %>% write.csv("~/Documents/beehive/cplvm/data/splatter/two_clusters.csv")
sim.groups$#Group
sim.groups$Group
nonresponsive_cells <- count_matrix[which(sim.groups$Group == "Group1")]
responsive_cells <- count_matrix[which(sim.groups$Group == "Group2")]
dim(nonresponsive_cells)
dim(responsive_cells)
dim(sim.groups@assays@data$counts)
nonresponsive_cells <- count_matrix[which(sim.groups$Group == "Group1"),]
responsive_cells <- count_matrix[which(sim.groups$Group == "Group2"),]
dim(sim.groups@assays@data$counts)
dim(responsive_cells)
# Split nonresponsive cells into background and foreground
n_nonresposive <- nrow(nonresponsive_cells)
n_bg <- int(n_nonresposive / 2)
n_bg <- (n_nonresposive / 2) %>% integer()
n_bg
n_nonresposive / 2
n_bg <- (n_nonresposive / 2) %>% round()
n_bg
sample(seq(n_nonresposive))
bg_idx <- sample(seq(n_nonresposive), size = n_bg, replace = F)
setdiff(seq(n_nonresposive, bg_idx))
setdiff(seq(n_nonresposive), bg_idx)
fg_nonresponsive_idx <- setdiff(seq(n_nonresposive), bg_idx)
stopifnot(length(intersect(bg_idx, fg_nonresponsive_idx)) == 0)
fg_data <- rbind(c(fg_nonresponsive_data, responsive_cells))
bg_data <- nonresponsive_cells[bg_idx,]
fg_nonresponsive_data <- nonresponsive_cells[fg_nonresponsive_idx,]
fg_data <- rbind(c(fg_nonresponsive_data, responsive_cells))
dim(fg_data)
fg_nonresponsive_data
dim(fg_nonresponsive_data)
fg_data <- cbind(c(fg_nonresponsive_data, responsive_cells))
dim(fg_data)
fg_data <- rbind(fg_nonresponsive_data, responsive_cells)
dim(fg_data)
# Save
bg_data %>% write.csv("~/Documents/beehive/cplvm/data/splatter/two_clusters/bg.csv")
fg_data %>% write.csv("~/Documents/beehive/cplvm/data/splatter/two_clusters/fg.csv")
fg_labels <- c(rep(0, nrow(fg_nonresponsive_data)), rep(1, nrow(responsive_cells)))
fg_labels
fg_labels %>% to.data.frame()
fg_labels %>% data.frame()
fg_labels %>% data.frame() %>%
set_colnames("fg_label")
library(splatter)
library(scater)
library(magrittr)
library(ggplot2)
set.seed(1)
## ----groups-------------------------------------------------------------------
sim.groups <- splatSimulate(batchCells = 200,
nGenes = 500,
group.prob = c(0.75, 0.25),
method = "groups",
verbose = F)
count_matrix <- sim.groups@assays@data$counts %>% t() %>% as.data.frame()
# Split into responsive and nonresponsive cells
nonresponsive_cells <- count_matrix[which(sim.groups$Group == "Group1"),]
responsive_cells <- count_matrix[which(sim.groups$Group == "Group2"),]
# Split nonresponsive cells into background and foreground
n_nonresposive <- nrow(nonresponsive_cells)
n_bg <- (n_nonresposive / 2) %>% round()
bg_idx <- sample(seq(n_nonresposive), size = n_bg, replace = F)
fg_nonresponsive_idx <- setdiff(seq(n_nonresposive), bg_idx)
stopifnot(length(intersect(bg_idx, fg_nonresponsive_idx)) == 0)
bg_data <- nonresponsive_cells[bg_idx,]
fg_nonresponsive_data <- nonresponsive_cells[fg_nonresponsive_idx,]
fg_data <- rbind(fg_nonresponsive_data, responsive_cells)
fg_labels <- c(rep(0, nrow(fg_nonresponsive_data)), rep(1, nrow(responsive_cells)))
# Save
bg_data %>% write.csv("~/Documents/beehive/cplvm/data/splatter/two_clusters/bg.csv")
fg_data %>% write.csv("~/Documents/beehive/cplvm/data/splatter/two_clusters/fg.csv")
fg_labels %>% data.frame() %>%
set_colnames("fg_label") %>%
write.csv("~/Documents/beehive/cplvm/data/splatter/two_clusters/fg_labels.csv")
install.packages("covequal")
library(covequal)
n1 <- 100
n2 <- 100
p <- 200
X <- matrix(rnorm(n1*p), ncol = p)
Y <- matrix(rnorm(n2*p), ncol = p)
test_that("no error in computing lambda", {
output1 <- try(test_covequal(X, Y, inference = "TW",
nperm = 10),
silent = TRUE)
output2 <- try(test_covequal(X, Y, inference = "permutation",
nperm = 10),
silent = TRUE)
expect_false(inherits(output1, "try-error"))
expect_false(inherits(output2, "try-error"))
})
output1 <- try(test_covequal(X, Y, inference = "TW",
nperm = 10),
silent = TRUE)
View(output1)
output1$test_statistic
output1$pvalue
?test_covequal
library(covequal)
n1 <- 100
library(covequal)
data_dir = "/Users/andrewjones/Documents/beehive/cplvm/experiments/simulation_experiments/hypothesis_testing/tmp"
X_path = file.path(data_dir, "X.csv")
Y_path = file.path(data_dir, "Y.csv")
X <- read.csv(X_path)
Y <- read.csv(Y_path)
X
corner(X)
library(useful)
corner(X)
X <- read.csv(X_path, row.names = 1)
corner(X)
Y <- read.csv(Y_path, row.names = 1)
head(X)
head(Y)
dim(X)
stopifnot(ncol(X) == ncol(Y))
output1 <- try(test_covequal(X, Y, inference = "TW",
nperm = 10),
silent = TRUE)
output1
output1 <- try(test_covequal(X, Y, inference = "TW",
nperm = 10),
silent = F)
X <- read.csv(X_path, row.names = 1) %>% as.matrix()
library(magrittr)
X <- read.csv(X_path, row.names = 1) %>% as.matrix()
Y <- read.csv(Y_path, row.names = 1) %>% as.matrix()
stopifnot(ncol(X) == ncol(Y))
output1 <- try(test_covequal(X, Y, inference = "TW",
nperm = 10),
silent = F)
output2 <- try(test_covequal(X, Y, inference = "permutation",
nperm = 10),
silent = TRUE)
output1
output2
output2
output2 <- try(test_covequal(X, Y, inference = "permutation",
nperm = 10),
silent = TRUE)
output2
output2 <- try(test_covequal(X, Y, inference = "permutation",
nperm = 10),
silent = F)
output1 %>% as.data.frame()
output1 %>% as.data.frame() %>%
write.csv(file.path(data_dir, "curr_johnston_output.csv"))
library("devtools")
devtools::install_github("lingxuez/sLED")
library(sLED)
library(magrittr)
?sLED
library(mvtnorm)
p<-700 # the dimension of multivariate
theta1<-2
theta2<-1
mat1<-diag(theta1,p-1)
mat2<-diag(theta1+theta1*theta2,p-1)
mat3<-diag(theta2,p-2)
mat1<-rbind(mat1,rep(0,p-1))
mat2<-rbind(mat2,rep(0,p-1))
mat3<-rbind(mat3,rep(0,p-2),rep(0,p-2))
mat1<-cbind(rep(0,p),mat1)
mat2<-cbind(rep(0,p),mat2)
mat3<-cbind(rep(0,p),rep(0,p),mat3)
sigma1<-mat1+t(mat1)+diag(1+theta1^2,p)
sigma2<-mat2+t(mat2)+mat3+t(mat3)+diag(1+theta1^2+theta2^2,p)
size1<-80
size2<-80
sam1<-rmvnorm(size1,runif(p,0,5),sigma1) # generate the samples
sam2<-rmvnorm(size2,runif(p,-3,3),sigma2)
equalCovs(sam1,sam2,size1,size2)
library(equalCovs)
library(magrittr)
library(mvtnorm)
p<-700 # the dimension of multivariate
theta1<-2
theta2<-1
mat1<-diag(theta1,p-1)
mat2<-diag(theta1+theta1*theta2,p-1)
mat3<-diag(theta2,p-2)
mat1<-rbind(mat1,rep(0,p-1))
mat2<-rbind(mat2,rep(0,p-1))
mat3<-rbind(mat3,rep(0,p-2),rep(0,p-2))
mat1<-cbind(rep(0,p),mat1)
mat2<-cbind(rep(0,p),mat2)
mat3<-cbind(rep(0,p),rep(0,p),mat3)
sigma1<-mat1+t(mat1)+diag(1+theta1^2,p)
sigma2<-mat2+t(mat2)+mat3+t(mat3)+diag(1+theta1^2+theta2^2,p)
size1<-80
size2<-80
sam1<-rmvnorm(size1,runif(p,0,5),sigma1) # generate the samples
sam2<-rmvnorm(size2,runif(p,-3,3),sigma2)
equalCovs(sam1,sam2,size1,size2)
sam1
typeof(sam1)
library(equalCovs)
library(magrittr)
setwd("~/Documents/beehive/cplvm/experiments/simulation_experiments/hypothesis_testing/")
data_dir = "./tmp"
X_path = file.path(data_dir, "X.csv")
Y_path = file.path(data_dir, "Y.csv")
X <- read.csv(X_path, row.names = 1) %>% as.matrix()
Y <- read.csv(Y_path, row.names = 1) %>% as.matrix()
typeof(X)
sam1
sam1 %>% dim()
X %>% dim()
X
sam``
sam1
setwd("~/Documents/beehive/cplvm/experiments/simulation_experiments/hypothesis_testing/")
data_dir = "./tmp"
X_path = file.path(data_dir, "X.csv")
Y_path = file.path(data_dir, "Y.csv")
X <- read.csv(X_path, row.names = 1) # %>% as.matrix()
Y <- read.csv(Y_path, row.names = 1) # %>% as.matrix()
X
X <- read.csv(X_path, row.names = 1)  %>% as.double()
X <- read.csv(X_path, row.names = 1) %>% as.numeric()
X <- read.csv(X_path, row.names = 1) %>% as.matrix()
X
sam1
View(sam1)
Y <- read.csv(Y_path, row.names = 1) %>% as.matrix() %>% t()
stopifnot(ncol(X) == ncol(Y))
X
Y
dim(Y)
dim(X)
setwd("~/Documents/beehive/cplvm/experiments/simulation_experiments/hypothesis_testing/")
data_dir = "./tmp"
X_path = file.path(data_dir, "X.csv")
Y_path = file.path(data_dir, "Y.csv")
X <- read.csv(X_path, row.names = 1) %>% as.matrix() %>% t()
Y <- read.csv(Y_path, row.names = 1) %>% as.matrix() %>% t()
X <- X[1:20,]
setwd("~/Documents/beehive/cplvm/experiments/simulation_experiments/hypothesis_testing/")
data_dir = "./tmp"
X_path = file.path(data_dir, "X.csv")
Y_path = file.path(data_dir, "Y.csv")
X <- read.csv(X_path, row.names = 1) %>% as.matrix() %>% t()
Y <- read.csv(Y_path, row.names = 1) %>% as.matrix() %>% t()
stopifnot(ncol(X) == ncol(Y))
output1 <- equalCovs(X, Y, size1 = nrow(X), size2 = nrow(Y))
X %>% dim()
output1
setwd("~/Documents/beehive/cplvm/experiments/simulation_experiments/hypothesis_testing/")
data_dir = "./tmp"
X_path = file.path(data_dir, "X.csv")
Y_path = file.path(data_dir, "Y.csv")
X <- read.csv(X_path, row.names = 1) %>% as.matrix() #%>% t()
Y <- read.csv(Y_path, row.names = 1) %>% as.matrix() #%>% t()
X
stopifnot(ncol(X) == ncol(Y))
X <- X[1:10,]
Y <- Y[1:10,]
stopifnot(ncol(X) == ncol(Y))
output1 <- equalCovs(X, Y, size1 = nrow(X), size2 = nrow(Y))
setwd("~/Documents/beehive/cplvm/experiments/simulation_experiments/hypothesis_testing/")
data_dir = "./tmp"
X_path = file.path(data_dir, "X.csv")
Y_path = file.path(data_dir, "Y.csv")
X <- read.csv(X_path, row.names = 1) %>% as.matrix() #%>% t()
Y <- read.csv(Y_path, row.names = 1) %>% as.matrix() #%>% t()
X <- X[1:20,]
Y <- Y[1:20,]
setwd("~/Documents/beehive/cplvm/experiments/simulation_experiments/hypothesis_testing/")
data_dir = "./tmp"
X_path = file.path(data_dir, "X.csv")
Y_path = file.path(data_dir, "Y.csv")
X <- read.csv(X_path, row.names = 1) %>% as.matrix() #%>% t()
Y <- read.csv(Y_path, row.names = 1) %>% as.matrix() #%>% t()
X <- X[1:20,]
Y <- Y[1:20,]
stopifnot(ncol(X) == ncol(Y))
output1 <- equalCovs(X, Y, size1 = nrow(X), size2 = nrow(Y))
output1 %>%
as.data.frame() %>%
t() %>%
set_colnames(c("test_stat", "pval")) %>%
write.csv(file.path(data_dir, "curr_li2012_output.csv"))
setwd("~/Documents/beehive/cplvm/experiments/simulation_experiments/hypothesis_testing/")
data_dir = "./tmp"
X_path = file.path(data_dir, "X.csv")
Y_path = file.path(data_dir, "Y.csv")
X <- read.csv(X_path, row.names = 1) %>% as.matrix() #%>% t()
Y <- read.csv(Y_path, row.names = 1) %>% as.matrix() #%>% t()
X <- X[1:100,]
Y <- Y[1:100,]
stopifnot(ncol(X) == ncol(Y))
output1 <- equalCovs(X, Y, size1 = nrow(X), size2 = nrow(Y))
setwd("~/Documents/beehive/cplvm/experiments/simulation_experiments/hypothesis_testing/")
data_dir = "./tmp"
X_path = file.path(data_dir, "X.csv")
Y_path = file.path(data_dir, "Y.csv")
X <- read.csv(X_path, row.names = 1) %>% as.matrix() #%>% t()
Y <- read.csv(Y_path, row.names = 1) %>% as.matrix() #%>% t()
X <- X[1:300,]
Y <- Y[1:300,]
stopifnot(ncol(X) == ncol(Y))
output1 <- equalCovs(X, Y, size1 = nrow(X), size2 = nrow(Y))
setwd("~/Documents/beehive/cplvm/experiments/simulation_experiments/hypothesis_testing/")
data_dir = "./tmp"
X_path = file.path(data_dir, "X.csv")
Y_path = file.path(data_dir, "Y.csv")
X <- read.csv(X_path, row.names = 1) %>% as.matrix() #%>% t()
Y <- read.csv(Y_path, row.names = 1) %>% as.matrix() #%>% t()
X <- X[1:100,]
Y <- Y[1:100,]
stopifnot(ncol(X) == ncol(Y))
output1 <- equalCovs(X, Y, size1 = nrow(X), size2 = nrow(Y))
